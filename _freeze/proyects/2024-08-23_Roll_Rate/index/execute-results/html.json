{
  "hash": "ca776088694bc0c0704e17d373052ce9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Análisis Roll Rate\nauthor: Joel Burbano\ndate: 08-23-2024\ncategories: [Python, Roll Rate]\ndescription: Análisis Roll Rate mediante matrices de transición para el dataset Default of Credit Card Clients\n---\n\n\n# Carga del dataset\n\n::: {#e1fc93fe .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\ndf = pd.read_csv(\"UCI_Credit_Card.csv\")\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>LIMIT_BAL</th>\n      <th>SEX</th>\n      <th>EDUCATION</th>\n      <th>MARRIAGE</th>\n      <th>AGE</th>\n      <th>PAY_0</th>\n      <th>PAY_2</th>\n      <th>PAY_3</th>\n      <th>PAY_4</th>\n      <th>...</th>\n      <th>BILL_AMT4</th>\n      <th>BILL_AMT5</th>\n      <th>BILL_AMT6</th>\n      <th>PAY_AMT1</th>\n      <th>PAY_AMT2</th>\n      <th>PAY_AMT3</th>\n      <th>PAY_AMT4</th>\n      <th>PAY_AMT5</th>\n      <th>PAY_AMT6</th>\n      <th>default.payment.next.month</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>20000.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>24</td>\n      <td>2</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>-1</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>689.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>120000.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>26</td>\n      <td>-1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>3272.0</td>\n      <td>3455.0</td>\n      <td>3261.0</td>\n      <td>0.0</td>\n      <td>1000.0</td>\n      <td>1000.0</td>\n      <td>1000.0</td>\n      <td>0.0</td>\n      <td>2000.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>90000.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>34</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>14331.0</td>\n      <td>14948.0</td>\n      <td>15549.0</td>\n      <td>1518.0</td>\n      <td>1500.0</td>\n      <td>1000.0</td>\n      <td>1000.0</td>\n      <td>1000.0</td>\n      <td>5000.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>50000.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>37</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>28314.0</td>\n      <td>28959.0</td>\n      <td>29547.0</td>\n      <td>2000.0</td>\n      <td>2019.0</td>\n      <td>1200.0</td>\n      <td>1100.0</td>\n      <td>1069.0</td>\n      <td>1000.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>50000.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>57</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>20940.0</td>\n      <td>19146.0</td>\n      <td>19131.0</td>\n      <td>2000.0</td>\n      <td>36681.0</td>\n      <td>10000.0</td>\n      <td>9000.0</td>\n      <td>689.0</td>\n      <td>679.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 25 columns</p>\n</div>\n```\n:::\n:::\n\n\n# Limpieza y Preparación de Datos\n\n::: {#36d1890b .cell execution_count=2}\n``` {.python .cell-code}\nprint(df.isnull().sum())\n\nprint(df.duplicated().sum())\n\n# df = df.drop_duplicates()\n\nprint(df.info())\n\n\n# Las columnas PAY_i con i={0,2,3,...,6} representan el estado de pago del cliente\n# -1: Pago a tiempo, 0: Pago debido, 1: 1-30 diás moroso, .... , 8: 180 + días moroso\n\n# Estandarizamos estas categorias\npay_cols = [\"PAY_\" + str(i) for i in [0,2,3,4,5,6]]\n\n# Reemplazamos valores por categorías más fáciles de interpretar\ndf[pay_cols] = df[pay_cols].replace({-2: 'No deuda',-1: 'Corriente', 0: 'Corriente',\n                                      1: '1-30 días', 2: '31-60 días', 3: '61-90 días',\n                                      4: '91-120 días', 5: '121-150 días',\n                                      6: '151-180 días', 7: '180+ días', 8: '180+ días'})\n                                      \n# Definir el orden deseado de los estados de pago\nestado_pago_orden = ['No deuda', 'Corriente', '1-30 días', '31-60 días', '61-90 días', '91-120 días', '121-150 días', '151-180 días', '180+ días']\nfor col in pay_cols:\n  df[col]=pd.Categorical(df[col], categories= estado_pago_orden, ordered = True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nID                            0\nLIMIT_BAL                     0\nSEX                           0\nEDUCATION                     0\nMARRIAGE                      0\nAGE                           0\nPAY_0                         0\nPAY_2                         0\nPAY_3                         0\nPAY_4                         0\nPAY_5                         0\nPAY_6                         0\nBILL_AMT1                     0\nBILL_AMT2                     0\nBILL_AMT3                     0\nBILL_AMT4                     0\nBILL_AMT5                     0\nBILL_AMT6                     0\nPAY_AMT1                      0\nPAY_AMT2                      0\nPAY_AMT3                      0\nPAY_AMT4                      0\nPAY_AMT5                      0\nPAY_AMT6                      0\ndefault.payment.next.month    0\ndtype: int64\n0\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 30000 entries, 0 to 29999\nData columns (total 25 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   ID                          30000 non-null  int64  \n 1   LIMIT_BAL                   30000 non-null  float64\n 2   SEX                         30000 non-null  int64  \n 3   EDUCATION                   30000 non-null  int64  \n 4   MARRIAGE                    30000 non-null  int64  \n 5   AGE                         30000 non-null  int64  \n 6   PAY_0                       30000 non-null  int64  \n 7   PAY_2                       30000 non-null  int64  \n 8   PAY_3                       30000 non-null  int64  \n 9   PAY_4                       30000 non-null  int64  \n 10  PAY_5                       30000 non-null  int64  \n 11  PAY_6                       30000 non-null  int64  \n 12  BILL_AMT1                   30000 non-null  float64\n 13  BILL_AMT2                   30000 non-null  float64\n 14  BILL_AMT3                   30000 non-null  float64\n 15  BILL_AMT4                   30000 non-null  float64\n 16  BILL_AMT5                   30000 non-null  float64\n 17  BILL_AMT6                   30000 non-null  float64\n 18  PAY_AMT1                    30000 non-null  float64\n 19  PAY_AMT2                    30000 non-null  float64\n 20  PAY_AMT3                    30000 non-null  float64\n 21  PAY_AMT4                    30000 non-null  float64\n 22  PAY_AMT5                    30000 non-null  float64\n 23  PAY_AMT6                    30000 non-null  float64\n 24  default.payment.next.month  30000 non-null  int64  \ndtypes: float64(13), int64(12)\nmemory usage: 5.7 MB\nNone\n```\n:::\n:::\n\n\n# Cálculo del Roll Rate\n\n::: {#2f15a4c8 .cell execution_count=3}\n``` {.python .cell-code}\n# Cálculo de las tasas de transición (Roll Rate)\nroll_rates = {}\n\n# Iteramos por pares de meses para calcular la tasa de transición entre estados de pago\nfor i in range(len(pay_cols)-1):\n  transition_matrix = pd.crosstab(df[pay_cols[i]], df[pay_cols[i+1]], normalize= 'index')\n  label = f'Transición de {pay_cols[i]} a {pay_cols[i+1]}'\n  roll_rates[label] = transition_matrix\n  \n# Resumen de tasas de transición\nroll_rates['Transición de PAY_0 a PAY_2']\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>PAY_2</th>\n      <th>No deuda</th>\n      <th>Corriente</th>\n      <th>1-30 días</th>\n      <th>31-60 días</th>\n      <th>61-90 días</th>\n      <th>91-120 días</th>\n      <th>121-150 días</th>\n      <th>151-180 días</th>\n      <th>180+ días</th>\n    </tr>\n    <tr>\n      <th>PAY_0</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>No deuda</th>\n      <td>0.928235</td>\n      <td>0.069953</td>\n      <td>0.000000</td>\n      <td>0.001812</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Corriente</th>\n      <td>0.000000</td>\n      <td>0.978358</td>\n      <td>0.000000</td>\n      <td>0.018949</td>\n      <td>0.002301</td>\n      <td>0.000245</td>\n      <td>0.000147</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1-30 días</th>\n      <td>0.331074</td>\n      <td>0.166757</td>\n      <td>0.007592</td>\n      <td>0.453362</td>\n      <td>0.029555</td>\n      <td>0.008677</td>\n      <td>0.001898</td>\n      <td>0.000542</td>\n      <td>0.000542</td>\n    </tr>\n    <tr>\n      <th>31-60 días</th>\n      <td>0.000000</td>\n      <td>0.371579</td>\n      <td>0.000000</td>\n      <td>0.596550</td>\n      <td>0.026622</td>\n      <td>0.005249</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>61-90 días</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.844720</td>\n      <td>0.127329</td>\n      <td>0.024845</td>\n      <td>0.003106</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>91-120 días</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.763158</td>\n      <td>0.197368</td>\n      <td>0.039474</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>121-150 días</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.961538</td>\n      <td>0.000000</td>\n      <td>0.038462</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>151-180 días</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>180+ días</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.321429</td>\n      <td>0.678571</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Visualización de Resultados\n\n::: {#0250b620 .cell execution_count=4}\n``` {.python .cell-code}\n# Visualización de cada matriz de transición utilizando heatmaps\nfor label, matrix in roll_rates.items():\n  plt.figure(figsize= (10,6))\n  sb.heatmap(matrix, annot = True, cmap = \"YlGnBu\", cbar = True)\n  plt.title(label)\n  plt.xlabel('Estado de Pago Siguiente')\n  plt.ylabel('Estado de Pago Actual')\n  plt.show()\n  plt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=819 height=598}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-3.png){width=819 height=598}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-5.png){width=819 height=598}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-7.png){width=819 height=598}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-9.png){width=819 height=598}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}