{
  "hash": "4bd8e279ffeda605b3bdc660276ee163",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Manejo de ETL's\"\nauthor: Joel Burbano\ndate:  2024-08-08\ncategories: [Python, R, SQL]\n\n---\n\n\n\n# Automatización de Procesos ETL\nEn este proyecto vamos a automatizar un proceso ETL, el mismo que tiene los siguientes pasos\n\n* Extraer los: En nuestro caso utilizaremos los datos de \"World Happiness report\" \n\n* Transformar los datos\n\n* Cargar los datos: se los cargarara en una base de SQLite\n\nViaualización del dataset\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Country\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Region\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Happiness Rank\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Happiness Score\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Standard Error\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Economy (GDP per Capita)\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Family\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Health (Life Expectancy)\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Freedom\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Trust (Government Corruption)\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Generosity\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Dystopia Residual\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Switzerland\",\"2\":\"Western Europe\",\"3\":\"1\",\"4\":\"7.587\",\"5\":\"0.03411\",\"6\":\"1.39651\",\"7\":\"1.34951\",\"8\":\"0.94143\",\"9\":\"0.66557\",\"10\":\"0.41978\",\"11\":\"0.29678\",\"12\":\"2.51738\",\"_rn_\":\"1\"},{\"1\":\"Iceland\",\"2\":\"Western Europe\",\"3\":\"2\",\"4\":\"7.561\",\"5\":\"0.04884\",\"6\":\"1.30232\",\"7\":\"1.40223\",\"8\":\"0.94784\",\"9\":\"0.62877\",\"10\":\"0.14145\",\"11\":\"0.43630\",\"12\":\"2.70201\",\"_rn_\":\"2\"},{\"1\":\"Denmark\",\"2\":\"Western Europe\",\"3\":\"3\",\"4\":\"7.527\",\"5\":\"0.03328\",\"6\":\"1.32548\",\"7\":\"1.36058\",\"8\":\"0.87464\",\"9\":\"0.64938\",\"10\":\"0.48357\",\"11\":\"0.34139\",\"12\":\"2.49204\",\"_rn_\":\"3\"},{\"1\":\"Norway\",\"2\":\"Western Europe\",\"3\":\"4\",\"4\":\"7.522\",\"5\":\"0.03880\",\"6\":\"1.45900\",\"7\":\"1.33095\",\"8\":\"0.88521\",\"9\":\"0.66973\",\"10\":\"0.36503\",\"11\":\"0.34699\",\"12\":\"2.46531\",\"_rn_\":\"4\"},{\"1\":\"Canada\",\"2\":\"North America\",\"3\":\"5\",\"4\":\"7.427\",\"5\":\"0.03553\",\"6\":\"1.32629\",\"7\":\"1.32261\",\"8\":\"0.90563\",\"9\":\"0.63297\",\"10\":\"0.32957\",\"11\":\"0.45811\",\"12\":\"2.45176\",\"_rn_\":\"5\"},{\"1\":\"Finland\",\"2\":\"Western Europe\",\"3\":\"6\",\"4\":\"7.406\",\"5\":\"0.03140\",\"6\":\"1.29025\",\"7\":\"1.31826\",\"8\":\"0.88911\",\"9\":\"0.64169\",\"10\":\"0.41372\",\"11\":\"0.23351\",\"12\":\"2.61955\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n:::{.panel-tabset}\n\n## Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nimport pandas as pd\nimport sqlite3\nimport logging\n\n\n# Configuración básica de logging\nlogging.basicConfig(filename='etl_processP.log', level=logging.INFO, \n                    format='%(asctime)s - %(levelname)s - %(message)s')\n\ndef extract_data():\n    try:\n        df = pd.read_csv('world_happiness_report.csv')\n        logging.info(\"Extracción de datos completada con éxito.\")\n        return df\n    except Exception as e:\n        logging.error(\"Error durante la extracción de datos: %s\", e)\n        raise\n\ndef transform_data(df):\n    try:\n        df = df.drop(columns=['Standard Error'])\n        df.iloc[:,2:].fillna(df.iloc[:,2:].mean(), inplace=True)\n        df = df.drop_duplicates()\n        df['Economy (GDP per Capita)'] = df['Economy (GDP per Capita)'] / df['Economy (GDP per Capita)'].max()\n        df['Happiness Level'] = df['Happiness Score'].apply(lambda x: 'High' if x > df['Happiness Score'].mean() else 'Low')\n        logging.info(\"Transformación de datos completada con éxito.\")\n        return df\n    except Exception as e:\n        logging.error(\"Error durante la transformación de datos: %s\", e)\n        raise\n\ndef load_data(df):\n    try:\n        conn = sqlite3.connect('world_happiness.db')\n        cursor = conn.cursor()\n        cursor.execute('''\n        CREATE TABLE IF NOT EXISTS happiness_data (\n            Country TEXT,\n            Region TEXT,\n            Happiness_Rank INTEGER,\n            Happiness_Score REAL,\n            GDP_per_capita REAL,\n            Happiness_Level TEXT\n        )\n        ''')\n        conn.commit()\n        df.to_sql('happiness_data', conn, if_exists='replace', index=False)\n        conn.close()\n        logging.info(\"Carga de datos completada con éxito.\")\n    except Exception as e:\n        logging.error(\"Error durante la carga de datos: %s\", e)\n        raise\n\ndef etl_process():\n    try:\n        logging.info(\"Inicio del proceso ETL.\")\n        data = extract_data()\n        transformed_data = transform_data(data)\n        load_data(transformed_data)\n        logging.info(\"Proceso ETL completado con éxito.\")\n    except Exception as e:\n        logging.critical(\"El proceso ETL falló: %s\", e)\n        raise\n\nif __name__ == \"__main__\":\n    etl_process()\n```\n:::\n\n\n\n\n## R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar las bibliotecas necesarias\n#install.packages(\"dplyr\")\n#install.packages(\"readr\")\n#install.packages(\"DBI\")\n#install.packages(\"RSQLite\")\n\nlibrary(dplyr)\nlibrary(readr)\nlibrary(DBI)\nlibrary(RSQLite)\n\n# Configuración básica de logging\nlog_file <- \"etl_processR.log\"\nlog_message <- function(level, message) {\n  cat(sprintf(\"%s - %s - %s\\n\", Sys.time(), level, message), file = log_file, append = TRUE)\n}\n\n# Función para extraer datos\nextract_data <- function() {\n  tryCatch({\n    df <- read_csv('world_happiness_report.csv')\n    log_message(\"INFO\", \"Extracción de datos completada con éxito.\")\n    return(df)\n  }, error = function(e) {\n    log_message(\"ERROR\", paste(\"Error durante la extracción de datos:\", e$message))\n    stop(e)\n  })\n}\n\n# Función para transformar datos\ntransform_data <- function(df) {\n  tryCatch({\n    df <- df %>% \n      select(-`Standard Error`) %>%\n      mutate(across(everything(), ~ifelse(is.na(.), mean(., na.rm = TRUE), .))) %>%\n      distinct() %>%\n      mutate(`Economy (GDP per Capita)` = `Economy (GDP per Capita)` / max(`Economy (GDP per Capita)`, na.rm = TRUE)) %>%\n      mutate(`Happiness Level` = ifelse(`Happiness Score` > mean(`Happiness Score`, na.rm = TRUE), 'High', 'Low'))\n    \n    log_message(\"INFO\", \"Transformación de datos completada con éxito.\")\n    return(df)\n  }, error = function(e) {\n    log_message(\"ERROR\", paste(\"Error durante la transformación de datos:\", e$message))\n    stop(e)\n  })\n}\n\n# Función para cargar datos en SQLite\nload_data <- function(df) {\n  tryCatch({\n    conn <- dbConnect(SQLite(), dbname = \"world_happiness.db\")\n    \n    dbExecute(conn, '\n    CREATE TABLE IF NOT EXISTS happiness_data (\n      Country TEXT,\n      Region TEXT,\n      Happiness_Rank INTEGER,\n      Happiness_Score REAL,\n      GDP_per_capita REAL,\n      Happiness_Level TEXT\n    )')\n    \n    dbWriteTable(conn, \"happiness_data\", df, overwrite = TRUE, row.names = FALSE)\n    dbDisconnect(conn)\n    log_message(\"INFO\", \"Carga de datos completada con éxito.\")\n  }, error = function(e) {\n    log_message(\"ERROR\", paste(\"Error durante la carga de datos:\", e$message))\n    stop(e)\n  })\n}\n\n# Función principal del proceso ETL\netl_process <- function() {\n  tryCatch({\n    log_message(\"INFO\", \"Inicio del proceso ETL.\")\n    data <- extract_data()\n    transformed_data <- transform_data(data)\n    load_data(transformed_data)\n    log_message(\"INFO\", \"Proceso ETL completado con éxito.\")\n  }, error = function(e) {\n    log_message(\"CRITICAL\", paste(\"El proceso ETL falló:\", e$message))\n    stop(e)\n  })\n}\n\n# Ejecutar el proceso ETL\nif (interactive()) {\n  etl_process()\n}\n```\n:::\n\n\n\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}